function [OPEN, path] = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1，Free=2
    MAP=2*(ones(MAX_X,MAX_Y));  % 先全部设为free
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;   % 取map的最后一个元素，即目标点
    xTarget=xval;
    yTarget=yval;   % 暂存目标点坐标
    MAP(xval,yval)=0;  % 目标点设为0
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;   % 障碍物点设为-1
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;   % 取map的第一个元素，即起点
    xStart=xval;
    yStart=yval;  % 暂存起点坐标
    MAP(xval,yval)=1;   % 起点设为1

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    path=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);

    %set the starting node as the first node (一些初始化)
    xNode=xStart;
    yNode=yStart;   % 当前访问节点
    OPEN_COUNT=1;   % open list的长度
    goal_distance=distance(xNode,yNode,xTarget,yTarget);   % 当前点到目标点的欧拉距离（即h(n)的值）
    path_cost=0;   % 从父节点到该点走过的距离
    % 将当前节点加入open list，open list中每个节点的数据结构为
    % （bool(是否在container中),该点x,该点y,父节点x,父节点y,g值,h值,f=g+h）
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost);
    OPEN(OPEN_COUNT,1)=0; % 该点已经visit，即可将flag位置为0，同时将其加入close list

    OPEN(OPEN_COUNT,1)=1; % 初始化一个包含初始点的container


%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(1) %you have to decide the Conditions for while loop exit 
        % 若OPEN中所有结点的flag位全为0，则container为空，则退出循环
        for i=1:OPEN_COUNT
            if sum(OPEN(:,1))==0
                disp('False! The container is empty!')
                break
            end
        end

        % 弹出具有最小f值的节点
        min_index = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
        % 访问该节点
        xNode=OPEN(min_index,2);
        yNode=OPEN(min_index,3);
        % 将该点加入close list
        OPEN(min_index,1)=0;   % 已访问的节点flag置为0
        CLOSED_COUNT=CLOSED_COUNT+1;
        CLOSED(CLOSED_COUNT,1)=xNode;
        CLOSED(CLOSED_COUNT,2)=yNode;

        % 判断节点是否为终点
        if xNode==xTarget && yNode==yTarget
            disp('Success! Target found!')
            break
        end

        % expand该节点
        exp_array=expand_array(xNode,yNode,OPEN(min_index,7),xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
        flag = 0;   % flag表示当前检查的expand node是否已在open list中，1表示在，0表示无
        if isempty(exp_array) ~= 1
            for i=1:size(exp_array(:,1))
                for j=1:OPEN_COUNT  % 遍历open list
                    if exp_array(i,1)==OPEN(j,2) && exp_array(i,2)==OPEN(j,3)
                        flag=1;  % 如果发现重合的点坐标，则把flag置为1
                        if OPEN(j,7)>exp_array(i,4)  % 如果当前expand到的路径cost更小，则维护open list中的值
                            OPEN(j,7)=exp_array(i,4);
                        end
                    end
                end
                if flag==0  % 若当前expand的node不在open list中
                    OPEN_COUNT=OPEN_COUNT+1;
                    OPEN(OPEN_COUNT,:) = insert_open(exp_array(i,1),exp_array(i,2),xNode,yNode,exp_array(i,3),exp_array(i,4));
                end
            end
        end
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    % 路径的序号
    NoPath=0;
    
    while(1)
        NoPath=NoPath+1;
        path(NoPath,1)=xNode;
        path(NoPath,2)=yNode;
        if xNode==xStart && yNode==yStart
            disp('Success! Path found!')
            break
        end
        for i = 1:OPEN_COUNT
            if xNode==OPEN(i,2) && yNode==OPEN(i,3)
                xNode=OPEN(i,4);
                yNode=OPEN(i,5);
            end
        end
    end

    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
end
